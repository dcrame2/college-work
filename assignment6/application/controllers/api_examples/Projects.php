<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */
require APPPATH . 'libraries/REST_Controller.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Projects extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();

        $this->load->model('Project_model');

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['projects_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['projects_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['projects_delete']['limit'] = 50; // 50 requests per hour per user/key
    }

    public function projects_get()
    {
        // Users from a data store e.g. database
        $projects = $this->Project_model->get_projects();

        // example way
        // $users = [
        //     ['id' => 1, 'name' => 'John', 'email' => 'john@example.com', 'fact' => 'Loves coding'],
        //     ['id' => 2, 'name' => 'Jim', 'email' => 'jim@example.com', 'fact' => 'Developed on CodeIgniter'],
        //     ['id' => 3, 'name' => 'Jane', 'email' => 'jane@example.com', 'fact' => 'Lives in the USA', ['hobbies' => ['guitar', 'cycling']]],
        // ];

        $id = $this->get('id');

        $search = $this->get('search');

        if ($search) {

          // stuff goes here if search was passed from the URL

        }

        // If the id parameter doesn't exist return all the projects
        else if ($id === NULL)
        {
            // Check if the users data store contains projects (in case the database result returns NULL)
            if ($projects)
            {
                // Set the response and exit
                $this->response($projects, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'message' => 'No projects were found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        } // end else if

        else {
            // Find and return a single record for a particular project.
            $id = (int) $id;

            // Validate the id.
            if ($id <= 0)
            {
                // Invalid id, set the response and exit.
                $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
            }

            // Get the user from the array, using the id as key for retrieval.
            // Usually a model is to be used for this.
            $project = NULL;

            if (!empty($projects))
            {
                $project = $this->Project_model->get_project($id);
            }

            if (!empty($project))
            {
                $this->set_response($project, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                $this->set_response([
                    'status' => FALSE,
                    'message' => 'User could not be found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        }

    } // close projects_get method

    // public function users_post()
    // {
    //     // $this->some_model->update_user( ... );
    //     $message = [
    //         'id' => 100, // Automatically generated by the model
    //         'name' => $this->post('name'),
    //         'email' => $this->post('email'),
    //         'message' => 'Added a resource'
    //     ];
    //
    //     $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    // }

    // public function users_delete()
    // {
    //     $id = (int) $this->get('id');
    //
    //     // Validate the id.
    //     if ($id <= 0)
    //     {
    //         // Set the response and exit
    //         $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
    //     }
    //
    //     // $this->some_model->delete_something($id);
    //     $message = [
    //         'id' => $id,
    //         'message' => 'Deleted the resource'
    //     ];
    //
    //     $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    // }

}
